#!/usr/bin/env python3.5

__doc__ = \
"""
Write, read, and edit your journal. Calling jour with no arguments will open
today's journal entry for writing.

jour relies on a few environment variables:

    $EDITOR - for editing a journal entries.
        Default: /usr/bin/vi

    $PAGER - for reading journal entries.
        Default: /bin/more

    $JOURNAL_DIR - the directory to store your journal entries.
        Default: ~/journal

The default naming schema for new entries is <year>.<month>.<day> with each
number zero-padded properly. Currently there is no option to change this.
"""

import argparse
import datetime
import logging
import os
from os.path import expanduser
import subprocess
import sys


logging.basicConfig(
    level=logging.WARNING,
    format='%(levelname)s %(funcName)s %(lineno)s - %(message)s',
    stream=sys.stderr
)


editor = os.environ.get('EDITOR', '/usr/bin/vi')
pager = os.environ.get('PAGER', '/bin/more')
journal_dir = os.environ.get('JOURNAL_DIR', expanduser("~/journal"))


def askToMakeDir(retries=4, reminder='Please try again!'):
    while True:
        ok = input('Can not find journal dir. Wanna make it? ')
        if ok in ('y', 'ye', 'yes', 'Y'):
            os.makedirs(journal_dir)
            return True
        if ok in ('n', 'no', 'nop', 'nope', 'N'):
            raise NotADirectoryError("{0} does not exist.".format(journal_dir))
            return False
        retries = retries - 1
        if retries < 0:
            raise ValueError('invalid user response')
        print(reminder)

def check():
  if not os.path.exists(journal_dir):
    askToMakeDir()

class Entry(object):
    """
    Represents a journal entry.
    """
    def __init__(self, date):
        self.date = date
        self.path = "{0:s}/{1}".format(journal_dir, date)
        self.content = self._parse_content()
        self.tags = self._parse_tags()

    def _parse_content(self):
        with open(self.path) as f:
            return f.readlines()

    def _parse_tags(self):
        parse_tags = lambda s: [w.strip() for w in s.strip("tags:").split(",")]
        tags = [parse_tags(l) for l in self.content if "tags" in l]
        return tags[0] if len(tags) > 0 else None


def date(dt):
    "Takes a datetime object and returns a string formatted as an entry."
    fmt = lambda n: "{0:02d}".format(n)
    return '.'.join((fmt(d) for d in [dt.year, dt.month, dt.day]))


class dateAction(argparse.Action):
    "TODO"
    def __init__(self, option_strings, dest, **kwargs):
        pass

    def __call__(self, parser, namespace, values, option_string):
        pass

## Commands ###################################################################


def list_entries(args):
    entries = os.listdir(journal_dir)
    for e in sorted(entries):
        entry = Entry(e)
        if entry.tags is not None:
            print("{0} : {1}".format(entry.date, ", ".join(entry.tags)))
        else:
            print(entry.date)
    exit(0)


def read_entry(args):
    e = Entry(args.date)
    if not os.path.exists(e.path):
        print("You haven't journaled yet today!")
        exit(1)
    else:
        print(e.path)
        subprocess.call([pager, e.path])
        exit(0)


def write_entry(args):
    e = Entry(args.date)
    subprocess.call([editor, e.path])
    exit(0)



## CLI #######################################################################

cli = argparse.ArgumentParser(
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description=__doc__
)

cli.add_argument(
    '-d',
    '--date',
    default=date(datetime.datetime.now()),
    help="Set the date for the entry. Defaults to today."
)

commands = cli.add_subparsers(dest="command")

ls = commands.add_parser('ls')
ls.set_defaults(command=list_entries)

read = commands.add_parser('read')
read.set_defaults(command=read_entry)


if __name__ == '__main__':
    args = cli.parse_args()
    if not args.command:
        check()
        write_entry(args)
    else:
        args.command(args)
